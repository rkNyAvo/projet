openapi: 3.0.1
info:
  title: Management of members of private lessons
  version: 1.0.0
servers:
- url: https://private-lessons.com

tags:
- name: Adherent
- name: Course
- name: Place
- name: Room
- name: Session

paths:
  /adherent:
    get:
      tags:
      - Adherent
      summary: Get all adherents
      operationId: findAdh
      parameters:
      - name: page
        in: query
        required: true
        schema:
            $ref: '#/components/schemas/Page'
      - name: page_size
        in: query
        required: true
        schema:
            $ref: '#/components/schemas/PageSize'
      - name: first_name
        in: query
        description: Filter adherent by first name, case is ignored
        schema:
          type: string
      - name: last_name
        in: query
        description: Filter adherent by last name, case is ignored
        schema:
          type: string
      - name: status
        in: query
        description: Filter adherent by status, case is ignored
        schema:
          type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Adherent'
        400:
          description: Bad request
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BadRequest'

    put:
      tags:
      - Adherent
      summary: Create new adherent or update an existing Adherent
      operationId: CreateOrUpdateAdh
      description: Update adherent when `id_adherent` are provided, create them otherwise.
      requestBody:
        description: Adherent object that needs to be added in the request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Adherent'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Adherent'
        400:
          description: Bad request
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BadRequest'

  /adherent/{id_adherent}:
    get:
      tags:
      - Adherent
      summary: Get adherent by ID
      operationId: findAdhByID
      parameters:
      - name: id_adherent
        in: path
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Adherent'
        400:
          description: Bad request
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BadRequest'

    delete:
      tags:
      - Adherent
      summary: Delete adherent by ID
      operationId: deleteAdh
      parameters:
      - name: id_adherent
        in: path
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: string
                example: Adherent succesfully deleted
        400:
          description: Bad request
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BadRequest'

  /course:
    get:
      tags:
      - Course
      summary: Get all courses
      operationId: findCourse
      parameters:
      - name: page
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Page'
      - name: page_size
        in: query
        required: true
        schema:
            $ref: '#/components/schemas/PageSize'
      - name: name_course
        in: query
        description: Filter courses by its name, case is ignored
        schema:
          type: string

      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Course'
        400:
          description: Bad request
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BadRequest'

    put:
      tags:
      - Course
      summary: Create new course or update an existing Course
      operationId: CreateOrUpdateCourse
      description: Update courses when `id_course` are provided, create them otherwise.
      requestBody:
        description: Course object that needs to be added in the request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Course'
        400:
          description: Bad request
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BadRequest'

  /course/{id_course}:
    get:
      tags:
      - Course
      summary: Get course by ID
      operationId: findCourseByID
      parameters:
      - name: id_course
        in: path
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Course'
        400:
          description: Bad request
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BadRequest'

    delete:
      tags:
      - Course
      summary: Delete course by ID
      operationId: deleteCourse
      parameters:
      - name: id_course
        in: path
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: string
                example: Course succesfully deleted
        400:
          description: Bad request
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BadRequest'

  /place:
    get:
      tags:
      - Place
      summary: Get all places
      operationId: findPlace
      parameters:
      - name: page
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Page'
      - name: page_size
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/PageSize'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Place'
        400:
          description: Bad request
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BadRequest'

    put:
      tags:
      - Place
      summary: Update an existing place
      operationId: UpdatePlc
      description: Update place when `id_place` are provided.
      requestBody:
        description: Place object that needs to be added in the request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Place'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Place'
        400:
          description: Bad request
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BadRequest'

  /place/{id_place}:
    get:
      tags:
      - Place
      summary: Get place by ID
      operationId: findPlcByID
      parameters:
      - name: id_place
        in: path
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Place'
        400:
          description: Bad request
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BadRequest'

    delete:
      tags:
      - Place
      summary: Delete place by ID
      operationId: deletePlace
      parameters:
      - name: id_place
        in: path
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: string
                example: Place succesfully deleted
        400:
          description: Bad request
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BadRequest'

  /room:
    get:
      tags:
      - Room
      summary: Get all Room
      operationId: findRoom
      parameters:
      - name: page
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Page'
      - name: page_size
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/PageSize'
      - name: capacity
        in: query
        description: Filter room by their capacity, case is ignored.
        schema:
          type: integer
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Room'
        400:
          description: Bad request
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BadRequest'

    put:
      tags:
      - Room
      summary: Update an existing room
      operationId: CreateOrUpdatePlc
      description: Update room when `id_room` are provided, create them otherwise.
      requestBody:
        description: Room object that needs to be added in the request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Room'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Room'
        400:
          description: Bad request
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BadRequest'

  /room/{id_room}:
    get:
      tags:
      - Room
      summary: Get room by ID
      operationId: findRoomByID
      parameters:
      - name: id_room
        in: path
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Room'
        400:
          description: Bad request
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BadRequest'

    delete:
      tags:
      - Room
      summary: Delete room by ID
      operationId: deleteRoom
      parameters:
      - name: id_room
        in: path
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: string
                example: Room succesfully deleted         
        400:
          description: Bad request
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BadRequest'

  /calendar:
    get:
      tags:
      - Session
      summary: Show calendar
      operationId: showCalendar
      parameters:
      - name: first_date_of_week
        in: query
        required: true
        schema:
          type: string
          format: date-time
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EDT'
        400:
          description: Bad request
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BadRequest'
    
    put:
      tags:
      - Session
      summary: Create new calendar or update an existing calendar
      operationId: CreateOrUpdateCalendar
      requestBody:
        description: Calendar object that needs to be added in the request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EDT'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/EDT'
        400:
          description: Bad request
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BadRequest'
    


  /sessions:
    get:
      tags:
      - Session
      summary: Get all sessions
      operationId: findSession
      parameters:
      - name: page
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Page'
      - name: page_size
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/PageSize'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Session'
        400:
          description: Bad request
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BadRequest'
    put:
      tags:
      - Session
      summary: Create new session or update an existing session
      operationId: CreateOrUpdateSession
      description: Update sessions when `id_session` are provided, create them otherwise.
      requestBody:
        description: Session object that needs to be added in the request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Session'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Session'
        400:
          description: Bad request
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BadRequest'

  /session/{id_session}:
    get:
      tags:
      - Session
      summary: Get session by ID
      operationId: findSessionByID
      parameters:
      - name: id_session
        in: path
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Session'
        400:
          description: Bad request
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BadRequest'

    delete:
      tags:
      - Session
      summary: Delete session by ID
      operationId: deleteSession
      parameters:
      - name: id_session
        in: path
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: string
                example: Session succesfully deleted
                
        400:
          description: Bad request
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BadRequest'
 
components:
  schemas:
    Adherent:
      type: object
      properties:
        id_adherent:
          type: integer
          format: int64
        first_name:
          type: string
          example: BEAR
        last_name:
          type: string
          example: Teddy
        phone:
          type: string
        email:
          type: string
          example: hey@gmail.com
        status:
          type: boolean
          enum:
            - true
            - false
    Course:
      type: object
      properties:
        id_course:
          type: integer
        name_course: 
          type: string
          example: Français
    Place:
      type: object
      properties:
        id_place:
          type: integer
        name_place: 
          type: string
          example: Alliance Française
    Room:
      type: object
      properties:
        id_room:
          type: integer
        name_room:
          type: string
          example: A1
        capacity:
          type: integer
          example: 100
        place:
          $ref: '#/components/schemas/Place'
    Session:
      type: object
      properties:
        id_session:
          type: integer
        course:
          $ref: '#/components/schemas/Course'
        room:
          $ref: '#/components/schemas/Room'
        start:
          format: date-time
          example: 2022-01-01 08:00
        end: 
          format: date-time
          example: 2022-01-01 09:30
    EDT:
      type: object
      properties:
        week:
          type: array
          items:
            $ref: '#/components/schemas/Day'
    Day:
      type: object
      properties:
        Date:
          type: string
          format: date-time
          example: 2022-01-01
        sessions:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/Session'
    BadRequest:
      type: object
      properties:
        type:
          type: string
          example: BadRequestException
        first_name:
          type: string
          example: Bad Request
    Page:
      type: integer
      description: Start at `1`
    PageSize:
      type: integer
      description: Cannot exceed `500`